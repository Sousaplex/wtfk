#!/usr/bin/env python3
"""
WTFK (What The Foreign Key) - Step 8: HTML Report Generation
Convert markdown reports to modern HTML with professional styling.
"""

import argparse
import json
import re
from pathlib import Path
from datetime import datetime
import mistune
from jinja2 import Environment, FileSystemLoader

class TemplatedHTMLGenerator:
    def __init__(self, settings_file="settings.json"):
        """Initialize HTML generator with settings and Jinja2 environment."""
        self.settings = self.load_settings(settings_file)
        self.env = Environment(loader=FileSystemLoader('templates/'))

    def load_settings(self, settings_file):
        """Load configuration from JSON file."""
        try:
            with open(settings_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {"html_generation": {"enable_generation": True}}

    def _style_table_names(self, content):
        """Style table names in backticks with custom CSS class."""
        pattern = r'`([^`]+)`'
        return re.sub(pattern, r'<span class="table-name">\1</span>', content)

    def _process_images(self, content):
        """Process image references for HTML."""
        pattern = r'<img src="([^"]+)" alt="([^"]+)">'
        replacement = r'<div class="diagram-container"><img src="\1" alt="\2" class="img-fluid"><div class="text-center mt-2 text-muted">\2</div></div>'
        return re.sub(pattern, replacement, content)

    def _wrap_sections(self, content):
        """Wraps the entire content in a single section div for consistent styling."""
        return f'<div class="section">{content}</div>'

    def _create_search_box(self):
        """Create search functionality HTML."""
        return '''
        <div class="search-box">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" class="form-control" id="searchInput" 
                       placeholder="Search tables, columns, or analysis..." 
                       onkeyup="searchContent()">
            </div>
        </div>
        '''

    def _generate_sidebar(self):
        """Generate sidebar with table of contents."""
        return '''
        <div class="col-md-3 sidebar">
            <div class="toc">
                <h5><i class="fas fa-list"></i> Table of Contents</h5>
                <div id="toc-content">
                    <!-- TOC will be generated by JavaScript -->
                </div>
            </div>
        </div>
        '''

    def generate_html(self, markdown_file, output_file=None, title=None):
        """Generate HTML from markdown file using Jinja2 template."""
        markdown_path = Path(markdown_file)
        if not markdown_path.exists():
            raise FileNotFoundError(f"Markdown file not found: {markdown_file}")

        output_file = Path(output_file or markdown_path.with_suffix('.html'))
        title = title or markdown_path.stem.replace('_', ' ').title()

        with open(markdown_path, 'r', encoding='utf-8') as f:
            markdown_content = f.read()
        
        html_content = mistune.html(markdown_content)
        
        html_content = self._process_images(html_content)
        html_content = self._style_table_names(html_content)
        html_content = self._wrap_sections(html_content)

        template = self.env.get_template('report_template.html')
        css_content = Path('templates/style.css').read_text(encoding='utf-8')
        js_content = Path('templates/script.js').read_text(encoding='utf-8')

        context = {
            'title': title,
            'project_name': self.settings.get('project', {}).get('name', 'Database Schema Analysis'),
            'generation_date': datetime.now().strftime('%B %d, %Y'),
            'main_content': html_content,
            'css_content': css_content,
            'js_content': js_content,
            'sidebar_content': self._generate_sidebar(),
            'search_box_content': self._create_search_box(),
            'content_width': 9
        }

        final_html = template.render(context)

        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(final_html)

        print(f"‚úÖ HTML report generated: {output_file}")
        print(f"üìÑ File size: {output_file.stat().st_size / 1024:.1f} KB")
        
        return output_file

def generate_html_report(markdown_file, output_file=None, title=None, settings_file="settings.json"):
    """
    High-level function to generate an HTML report from a markdown file.
    Returns the path to the generated HTML file on success, None on failure.
    """
    try:
        generator = TemplatedHTMLGenerator(settings_file=settings_file)
        generated_file = generator.generate_html(
            markdown_file=markdown_file,
            output_file=output_file,
            title=title
        )
        
        if generated_file:
            print(f"\nüåê HTML Report Ready: {generated_file}")
            print("Features: ‚ú® Search, üì± Responsive, üé® Styled tables")
        
        return generated_file
    except Exception as e:
        print(f"‚ùå Error generating HTML report: {e}")
        return None

def main():
    parser = argparse.ArgumentParser(description="Generate modern HTML reports from WTFK markdown")
    parser.add_argument("markdown_file", help="Path to markdown file to convert")
    parser.add_argument("-o", "--output", help="Output HTML file path")
    parser.add_argument("-t", "--title", help="HTML page title")
    parser.add_argument("-s", "--settings", help="Path to settings.json file", default="settings.json")
    parser.add_argument("--open", help="Open the generated HTML file in browser", action="store_true")
    
    args = parser.parse_args()
    
    output_file = generate_html_report(
        markdown_file=args.markdown_file,
        output_file=args.output,
        title=args.title,
        settings_file=args.settings
    )
    
    if output_file and args.open:
        import webbrowser
        webbrowser.open(f'file://{Path(output_file).absolute()}')
        print(f"üöÄ Opened in browser")
    elif not output_file:
        sys.exit(1)

if __name__ == "__main__":
    main()
